.. _howto.rst:

*************
How to use it
*************

ForBES consist of the MATLAB routine ``forbes`` taking a problem description
and (optionally) some options, and returning the results of the optimization
process. We will now describe the structure of the problems that ForBES solves,
and how to specify it to the ``forbes`` routine.

Examples on how to use forbes can be found in the `demos folder`_. 

You can access the help file of the solver directly from MATLAB in any moment with::

    help forbes

.. _problem-structure:

Problem structure
=================

The generic formulation of the problems we consider is the following:

.. math::
    \mathrm{minimize}\ & f(Cx+d) + g(z)\\
    \mathrm{subject\ to}\ & Ax + Bz = b

Not all the terms need to be present: if :math:`A, B, b` in the constraints are
omitted, then it is assumed to be :math:`x=z` and the problem takes the
unconstrained composite form

.. math::
    \mathrm{minimize}\ & f(Cx+d) + g(x)

Here :math:`f` is assumed to be convex, smooth (i.e. with Lipschitz continuous
gradient) and twice continuously differentiable. Function :math:`g` is any
closed, proper, convex function.

If :math:`A, B, b` are specified, then :math:`C=I` and :math:`d=0`, and the
problem has the separable form

.. math::
    \mathrm{minimize}\ & f(x) + g(z)\\
    \mathrm{subject\ to}\ & Ax + Bz = b

Here :math:`f` (if present) is strongly convex and twice continuously differentiable
in the interior of its domain, while g is proper, closed and convex. Linear operators
:math:`A,B` are of appropriate dimension along with vector :math:`b` in the constraints.

Calling ``forbes``
==================

The most generic call to ``forbes`` is as follows::

    out = forbes(f, g, init, aff, constr, opt);

- ``f`` and ``g`` contain the objective terms of the problem (see section :ref:`functions` below on how to select them).
- ``init`` is the initial value of :math:`x` if there are no equality constraints,
  or the initial dual variable associated with the constraint :math:`Ax+Bz=b` otherwise.
- ``aff`` is a cell array describing the affine terms composed with :math:`f`::

    aff = {C, d};
    
  If omitted or empty, that is ``aff = []`` or ``aff = {}``, then :math:`C=I` and :math:`d=0`.
- ``constr`` is a cell array describing the linear equality constraints::

    constr = {A, B, b};
    
  If omitted or empty, that is ``constr = []`` or ``constr = {}``, then :math:`A=I`, :math:`B=-I` and :math:`b=0`.
- ``opt`` describes, e.g., details on the algorithm to use, termination criteria,
  the level of verbosity, and so on. More on this in the :ref:`options` section below.

Output ``out`` will contain the results of the optimization process.

.. _functions:

Functions
=========

All the functions involved in the problem can be picked from a library of
functions available in the `library folder`_: this contains procedures returning
commonly used functions, specified by a list of parameters if needed. The return
object can directly be fed to ``forbes`` to describe the problem. For example::

    f = logLoss(m); % f is the log-logistic function times a coefficient m
    g = indPos(); % g is the indicator function of the nonnegative orthant
    out = forbes(f, g);

Check out the :ref:`library.rst` section for more information on the available
functions and how to use them and the parameters they require, or the documentation
of each of the functions in the `library folder`_.

.. _options:

Options
=======

+--------------------+-----------------------+-----------------------------------------------------------+
| Attribute          | Type                  | What is it                                                |
+====================+=======================+===========================================================+
| ``opt.tol``        | real                  | Tolerance for optimality                                  |
+--------------------+-----------------------+-----------------------------------------------------------+
| ``opt.maxit``      | integer               | Maximum number of iterations                              |
+--------------------+-----------------------+-----------------------------------------------------------+
| ``opt.method``     | string                | - ``'sd'``: steepest descent                              |
|                    |                       | - ``'cg-desc'``, ``'cg-prp'``, ``'cg-dyhs'``: nonliner CG |
|                    |                       | - ``'lbfgs'``: L-BFGS                                     |
+--------------------+-----------------------+-----------------------------------------------------------+
|``opt.variant``     | string                | - ``'basic'``                                             |
|                    |                       | - ``'global'``                                            |
|                    |                       | - ``'fast'``                                              |
+--------------------+-----------------------+-----------------------------------------------------------+
| ``opt.linesearch`` | string                | - ``'armijo'``                                            |
|                    |                       | - ``'hager-zhang'``                                       |
|                    |                       | - ``'lemarechal'``                                        |
|                    |                       | - ``'fletcher'``                                          |
|                    |                       | - ``'more-thuente'``                                      |
+--------------------+-----------------------+-----------------------------------------------------------+

.. _library folder: https://github.com/lostella/ForBES/tree/master/library
.. _demos folder: https://github.com/lostella/ForBES/tree/master/demos
